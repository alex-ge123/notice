<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/task  http://www.springframework.org/schema/task/spring-task-4.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

    <!-- 线程池 大小5-50个 等待执行的任务队列的容量500  线程池维护线程所允许的空闲时间300s-->
    <task:executor id="taskExecutor" pool-size="5-100" queue-capacity="500" keep-alive="300"/>
    <task:annotation-driven/>
    <!--<aop:aspectj-autoproxy/>-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
    <!-- 自动扫描且不扫描@Controller -->
    <context:component-scan base-package="com.wafersystems"
                            use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>

    <!-- websocket消息处理 -->
    <bean id="websocket" class="com.wafersystems.notice.message.controller.WebSocketEndPoint"/>
    <websocket:handlers allowed-origins="*">
        <websocket:mapping path="/websocket" handler="websocket"/>
        <websocket:handshake-interceptors>
            <bean class="com.wafersystems.notice.message.interceptor.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>
    <bean class="org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean">
        <property name="maxTextMessageBufferSize" value="10485670"/>
        <property name="maxBinaryMessageBufferSize" value="10485670"/>
        <property name="maxSessionIdleTimeout" value="180000"/>
        <property name="asyncSendTimeout" value="600000"/>
    </bean>

    <!-- spring全局异常处理 -->
    <!-- <bean id="asyncExceptionHandler" class="com.github.zhangkaitao.spring.service.MyAsyncExceptionHandler"/>
    <task:annotation-driven exception-handler="asyncExceptionHandler" proxy-target-class="true" />  -->
    <!-- spring全局异常处理 over-->
    <!--<bean id="dataSource"-->
          <!--class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">-->
        <!--<property name="targetDataSource" ref="baseDataSource">-->
        <!--</property>-->
    <!--</bean>-->
    <!--<bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
        <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
        <!--<property name="url" value="${db.url}"/>-->
        <!--<property name="username" value="${db.username}"/>-->
        <!--<property name="password" value="${db.password}"/>-->

        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--<property name="initialSize" value="5"/>-->
        <!--<property name="minIdle" value="5"/>-->
        <!--<property name="maxActive" value="60"/>-->

        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000"/>-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->

        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000"/>-->

        <!--<property name="validationQuery" value="SELECT 'x' FROM dual"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--<property name="testOnBorrow" value="false"/>-->
        <!--<property name="testOnReturn" value="false"/>-->

        <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="false"/>-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>-->

        <!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
        <!--<property name="filters" value="stat,log4j"/>-->

        <!--&lt;!&ndash; 打开removeAbandoned功能,如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时输出错误日志 &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="false"/>-->
        <!--<property name="removeAbandonedTimeout" value="1800"/>-->
        <!--<property name="logAbandoned" value="false"/>-->
    <!--</bean>-->
    <!--<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="packagesToScan">-->
            <!--<list>-->
                <!--<value>com.wafersystems.notice.*.model</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="hibernateProperties">-->
            <!--<props>-->
                <!--&lt;!&ndash;配置审计表名的后缀，默认为空  &ndash;&gt;-->
                <!--<prop key="org.hibernate.envers.audit_table_suffix">_AUD</prop>-->
                <!--&lt;!&ndash;配置审计表中记录版本号的字段名称  &ndash;&gt;-->
                <!--<prop key="org.hibernate.envers.revision_field_name">VER</prop>-->
                <!--&lt;!&ndash;配置审计表中数据操作类型的字段名称，0：新增   1：修改   2：删除  &ndash;&gt;-->
                <!--<prop key="org.hibernate.envers.revision_type_field_name">REVTYPE</prop>-->
                <!--&lt;!&ndash;配置是否支持关联表修改时记录修改记录,默认为true  &ndash;&gt;-->
                <!--<prop key="org.hibernate.envers.revision_on_collection_change">true</prop>-->
                <!--&lt;!&ndash;配置是否不对乐观锁字段修改时记录修改记录，即使用Version字段，默认值为true  &ndash;&gt;-->
                <!--<prop key="org.hibernate.envers.do_not_audit_optimistic_locking_field">true</prop>-->
                <!--&lt;!&ndash;配置是否在删除操作时，记录所有字段还是只记录id值。默认为false    false：只记录id   true：记录全部字段  &ndash;&gt;-->
                <!--<prop key="org.hibernate.envers.store_data_at_delete">true</prop>-->
                <!--&lt;!&ndash;配置审计表的catalog，默认为null  &ndash;&gt;-->
                <!--&lt;!&ndash;设计策略 2选1 当前审计实体仅保留start and end row data&ndash;&gt;-->
                <!--<prop key="org.hibernate.envers.audit_strategy">org.hibernate.envers.strategy.ValidityAuditStrategy-->
                <!--</prop>-->
                <!--&lt;!&ndash;  mysql注释掉，oracle放开 &ndash;&gt;-->
                <!--&lt;!&ndash; <prop key="hibernate.default_schema">${hibernate.default_schema}</prop> &ndash;&gt;-->
                <!--<prop key="hibernate.dialect">${hibernate.dialect}</prop>-->
                <!--<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>-->
                <!--<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>-->
                <!--<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>-->
                <!--&lt;!&ndash; 批量执行 update  inserts语句时，按照the entity type and the primary key 排序，可减少高并发系统死锁&ndash;&gt;-->
                <!--<prop key="hibernate.order_update">${hibernate.order_update}</prop>-->
                <!--<prop key="hibernate.order_inserts">${hibernate.order_inserts}</prop>-->
                <!--<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>-->
                <!--<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>-->
                <!--<prop key="cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>-->
                <!--<prop key="bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>-->
                <!--<prop key="connection.useUnicode">${hibernate.connection.useUnicode}</prop>-->
                <!--<prop key="connection.characterEncoding">${hibernate.connection.characterEncoding}</prop>-->
                <!--<prop key="hibernate.jdbc.use_scrollable_resultset">${hibernate.jdbc.use_scrollable_resultset}</prop>-->
                <!--<prop key="hibernate.transaction.coordinator_class">${hibernate.transaction.coordinator_class}</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">-->
        <!--<property name="sessionFactory" ref="sessionFactory"/>-->
    <!--</bean>-->

    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="merge*" propagation="REQUIRED"/>-->
            <!--<tx:method name="del*" propagation="REQUIRED"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED"/>-->
            <!--<tx:method name="send*" propagation="REQUIRED"/>-->
            <!--<tx:method name="init*" propagation="REQUIRED"/>-->
            <!--<tx:method name="get*" read-only="true"/>-->
            <!--<tx:method name="find*" read-only="true"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--<aop:config>-->
        <!--<aop:pointcut id="allManagerMethod" expression="execution(* com.wafersystems.notice.*.service..*(..))"/>-->
        <!--<aop:advisor pointcut-ref="allManagerMethod" advice-ref="txAdvice"/>-->
    <!--</aop:config>-->

    <!-- 国际化配置 -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages"/>
    </bean>

    <!-- email config -->
    <import resource="classpath:applicationContext-mail.xml"/>
</beans>
